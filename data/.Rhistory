geom_point(mapping = aes(color = class)) +
gemo_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
library(tidyverse)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = TRUE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(linetype = class)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(linetype = drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(group = drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(color = drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = mpg, aes(x = displ, y = hwy, color = drv))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?stat_summary
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(x = cut)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
com_sdlg %>%
filter(quadrat == 10030) %>%
arrange(., date1)
library(tidyverse)
library(magrittr)
com_sdlg %>%
filter(quadrat == 10030) %>%
arrange(., date1)
library(tidyverse)
library(magrittr)
library(reshape2)
com_sdlg <- read.csv("comita_seedling.csv")
head(com_sdlg)
load("condit_shade.Rdata")
version
library(sp)
coords = matrix(c(78.46801, 19.53407,
78.46801, 19.74557,
78.83157, 19.74557,
78.83157, 19.53407,
78.46801, 19.53407),
ncol = 2, byrow = TRUE)
P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps1, axes = TRUE)
library(sp)
getwd()
library(rgeos)
library(tidyverse)
library(magrittr)
library(adehabitatHR)
library(foreign)
library(rgdal)
library(raster)
library(ggmap)
elk_locs <- foreign::read.dbf("elk_data.dbf")
elk_locs_raw <- foreign::read.dbf("elk_data.dbf")
#Creating a polygon of the northern study area
coords = matrix(c(-123.607, 41.74352,
-123.577838, 41.430753,
-123.2873,  41.430753,
-123.32927, 41.727123,
-123.607, 41.74352),
ncol = 2, byrow = TRUE)
#function for creating a polygon shapefile of the northern area
P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "study_area_1")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps1, axes = TRUE)
#writing to a shapefile
writeOGR(obj = as(Ps1, "SpatialPolygonsDataFrame"), dsn = "study_area_1", layer = "study_area_1", driver = "ESRI Shapefile", overwrite_layer = TRUE)
#Creating a polygon of the southern study area
#plot(locs_clean, axes = TRUE)
coords2 <- matrix(data = c(-123.3059, 40.98755,#bottom left
-123.3059, 41.20548,
-122.9226, 41.20548,
-122.9226, 40.98755,
-123.3059, 40.98755
), ncol = 2, byrow = TRUE)
P2 <- Polygon(coords2)
#proj4string(P2) <- WGS1984
Ps2 <- SpatialPolygons(list(Polygons(srl = list(P2), ID = "study_area_2")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps2, axes = TRUE)
points(locs_clean)
#writing to a shapefile
writeOGR(obj = as(Ps2, "SpatialPolygonsDataFrame"), dsn = "study_area_2", layer = "study_area_2", driver = "ESRI Shapefile", overwrite_layer = TRUE)
#reading in a clipped vector file of burn severity and year of burn for the northern study area (study area 1)
burn_sev <- shapefile("burn_sev_c")
#reading in a clippe vector file of burn severity and year of burn for the southern study area (study area 2)
burn_sev_south <- shapefile("burn_sev_area_2")
#reading in the shapefile of the fire perimeters
fire_perims <- shapefile("fire_perims")
WGS1984 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
UTM10 <- CRS("+proj=utm +zone=10 +datum=WGS84")
elk_locs <- foreign::read.dbf("elk_data.dbf")
getwd()
setwd("C:/Users/ahanb/OneDrive/Documents/Berkeley/AHB Research/elk/elk_R/Elk_R_project/data")
setwd("C:/Users/ahanb/OneDrive/Documents/Berkeley/AHB Research/elk/elk_R/Elk_R_project/data")
elk_locs <- foreign::read.dbf("elk_data.dbf")
elk_locs_raw <- foreign::read.dbf("elk_data.dbf")
coords = matrix(c(-123.607, 41.74352,
-123.577838, 41.430753,
-123.2873,  41.430753,
-123.32927, 41.727123,
-123.607, 41.74352),
ncol = 2, byrow = TRUE)
P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "study_area_1")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps1, axes = TRUE)
writeOGR(obj = as(Ps1, "SpatialPolygonsDataFrame"), dsn = "study_area_1", layer = "study_area_1", driver = "ESRI Shapefile", overwrite_layer = TRUE)
coords2 <- matrix(data = c(-123.3059, 40.98755,#bottom left
-123.3059, 41.20548,
-122.9226, 41.20548,
-122.9226, 40.98755,
-123.3059, 40.98755
), ncol = 2, byrow = TRUE)
P2 <- Polygon(coords2)
#proj4string(P2) <- WGS1984
Ps2 <- SpatialPolygons(list(Polygons(srl = list(P2), ID = "study_area_2")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps2, axes = TRUE)
points(locs_clean)
writeOGR(obj = as(Ps2, "SpatialPolygonsDataFrame"), dsn = "study_area_2", layer = "study_area_2", driver = "ESRI Shapefile", overwrite_layer = TRUE)
#reading in a clipped vector file of burn severity and year of burn for the northern study area (study area 1)
burn_sev <- shapefile("burn_sev_c")
burn_sev_south <- shapefile("burn_sev_area_2")
WGS1984 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
UTM10 <- CRS("+proj=utm +zone=10 +datum=WGS84")
date_time <- paste0(elk_locs$YEAR_,".", elk_locs$MONTH_,".", elk_locs$DAY_,".", elk_locs$HOUR_,".", elk_locs$MINUTE_,".",elk_locs$SECOND_)
date_time <- as.POSIXct(strptime(date_time,format="%Y.%m.%d.%H.%M.%S"))
elk_locs$date_time <- date_time
NAtimes <- is.na(elk_locs$date_time)
elk_locs <- elk_locs[NAtimes == FALSE,]
all_elk_locs <- elk_locs[elk_locs$UTM_EAST > 10,]
elk_locs <- all_elk_locs[elk_locs$UTM_EAST > 440000,]
elk_locs <- elk_locs[is.na(elk_locs$UTM_EAST) == FALSE,]
elk_locs$AID <- plyr::mapvalues(elk_locs$ANIMAL_ID, from = unique(elk_locs$ANIMAL_ID), to = paste0("E",seq(1:length(unique(elk_locs$ANIMAL_ID)))))
xy.elk <- elk_locs[c("UTM_EAST", "UTM_NORTH")]
xy.sp.elk <- SpatialPoints(na.omit(xy.elk), proj4string = CRS("+proj=utm +zone=10 +datum=WGS84"))
xy.df.elk <- data.frame(xy.sp.elk)
move.df.elk <- data.frame(ID = elk_locs$AID, Burst = elk_locs$date_time)
move.df.elk$ID <- factor(move.df.elk$ID, levels = unique(move.df.elk$ID))
#adding coordinates to the move dataframe
coordinates(move.df.elk) <- xy.df.elk
#creating a trajectory object with the above move dataframe
ltraj.elk <- as.ltraj(coordinates(move.df.elk), move.df.elk$Burst, id = move.df.elk$ID)
ltraj.elk
#converting the trajectory object into dataframe mode
ltraj.elk.df <- ld(ltraj.elk)
ltraj.elk.df
ggplot(data = ltraj.elk.df) +
geom_histogram(mapping = aes(x = dt/3600), binwidth = 0.25) +
coord_cartesian(ylim = c(0, 10000), xlim = c(0,15))
ltraj.elk.df <- ltraj.elk.df[ltraj.elk.df$dt/3600 < 50,]
ltraj.elk.df <- ltraj.elk.df[!is.na(ltraj.elk.df),]
#converting cleaned traj dataframe back to a trajectory object
ltraj.elk <- dl(ltraj.elk.df)
Panther_2008 <- burn_sev[burn_sev@data$VB_ID == "2008PANTHER_MERRILL_HAYPRESS" & burn_sev@data$BEST_ASSES == "YES",]
writeOGR(Panther_2008, driver='ESRI Shapefile', dsn = "Panther_2008_poly", layer = "Panther_2008_poly", overwrite_layer = TRUE)
burn_ext <- extent(bbox(obj = Panther_2008))
n_pixels <- (bbox(Panther_2008)[2,2] - bbox(Panther_2008)[2,1])/30
burn_rast <- raster(ncol=n_pixels, nrow=n_pixels, ext = burn_ext, crs = proj4string(Panther_2008))
res(burn_rast) <- c(30,30)
burn_rast_panther_2008 <- rasterize(x = Panther_2008, y = burn_rast, field = "BURNSEV", small = TRUE)
plot(burn_rast_panther_2008)
writeRaster(burn_rast_panther_2008, "Panther_Fire_Burn_Severity", format = "GTiff")
writeRaster(burn_rast_panther_2008, "Panther_Fire_Burn_Severity", format = "GTiff", overwrite = TRUE)
#converting the raster object so that it can be saved as a KML.
#first changing the coordinate system
kml_rast_panther <- projectExtent(object = burn_rast_panther_2008, crs = CRS("+init=epsg:4326"))
kml_rast_panther_vals <- projectRaster(from = burn_rast_panther_2008, to = kml_rast_panther, method = "ngb")
KML(kml_rast_panther_vals, "Panther_fire")
plot(kml_rast_panther_vals)
filledContour(kml_rast_panther_vals)
keep <- !is.na(values(kml_rast_panther_vals))
all_points <- values(kml_rast_panther_vals)[keep]
point_vals <- extract(x = kml_rast_panther_vals, y = seq(1:length(values(kml_rast_panther_vals)))[keep], sp = TRUE)
?extract
seq(1:length(values(kml_rast_panther_vals)))[keep]
point_vals <- extract(x = kml_rast_panther_vals, y = seq(1:length(values(kml_rast_panther_vals)))[keep], sp = TRUE)
point_vals <- extract(x = kml_rast_panther_vals, y = seq(1:length(values(kml_rast_panther_vals)))[keep])
point_vals
#converting the raster to point values
panther_fire_points_vals <- rasterToPoints(kml_rast_panther_vals, spatial = TRUE)
writeOGR(panther_fire_points_vals,driver='ESRI Shapefile', dsn = "Panther_2008_points", layer = "Panther_2008_points")
writeOGR(panther_fire_points_vals,driver='ESRI Shapefile', dsn = "Panther_2008_points", layer = "Panther_2008_points", overwrite_layer = TRUE)
?sampleRegular
panther_fire_extent <- extent(panther_fire_points_vals)
reg_Samp_panther <- sampleRegular(x = kml_rast_panther_vals, size = 5000, extent = panther_fire_extent, xy = TRUE)
length(reg_Samp_panther)
reg_Samp_panther
length(as.data.frame(reg_Samp_panther)$x)
locs_clean <- na.omit(ltraj.elk.df[,c(1,2)])
coordinates(locs_clean) <- ~x+y
proj4string(locs_clean) <- UTM10
locs_clean <- spTransform(locs_clean, WGS1984)
plot(locs_clean)
#transforming the burn severity spatial polygons object to WGS1984 with only the best assessment. SA1 = study area north, which "burn sev" was initially clipped to in ArcGIS.
Bsev_best_assess_SA1 <- burn_sev[burn_sev@data$BEST_ASSES == "YES" ,]
Bsev_WGS1984_SA1 <- spTransform(Bsev_best_assess_SA1, WGS1984)
fireNames <- sort(unique(fireNames) ,decreasing = TRUE)
fire_stack <- onefire(data = Bsev_WGS1984_SA1, fireName = fireNames[1])
reclass <- matrix(data = c(1,NA), ncol = 2, byrow = TRUE)
fire_stack <- reclassify(fire_stack, reclass)
Bsev_WGS1984_SA1
#disaggregating the polygon to make a rasterstack of the burn severity for every fire in study area1.
fireNames <- Bsev_WGS1984_SA1@data$VB_ID
fireNames <- sort(unique(fireNames) ,decreasing = TRUE)
fireNames
fire_stack <- onefire(data = Bsev_WGS1984_SA1, fireName = fireNames[1])
onefire <- function(data, fireName, field.x = "BURNSEV"){
vector_form <- data[data@data$VB_ID == fireName,]
b_ext <- extent(bbox(obj = data))
npix <- ((b_ext[4]-b_ext[3]) * 111.32 * 1000) / 30
#creating a raster of burn severity for the Panther fire
raster_shell <- raster(ncol=npix, nrow=npix, ext = b_ext, crs = CRS(proj4string(vector_form)))
res(raster_shell) <- c(0.000269409, 0.000269409)
raster_form  <- rasterize(x = vector_form, y = raster_shell, field = field.x, small = TRUE)
print(paste0("finished ",fireName))
return(raster_form)
}
fire_stack <- onefire(data = Bsev_WGS1984_SA1, fireName = fireNames[1])
reclass <- matrix(data = c(1,NA), ncol = 2, byrow = TRUE)
fire_stack <- reclassify(fire_stack, reclass)
for(i in 2:length(fireNames)){
frNm <- fireNames[i]
fire_rast <- onefire(data = Bsev_WGS1984_SA1, fireName = frNm, field = "BURNSEV")
print(paste0("finished ",frNm))
fire_rast <- reclassify(x = fire_rast, rcl = reclass)
fire_stack <- stack(fire_stack, fire_rast)
}
names(fire_stack) <- fireNames
getwd()
fire_stack
#merging the layers to create a "burn severity of the last burn layer"
#this part can be tweaked for each elk you are working on
#OBJECT BELOW IS WHAT I SHOULD USE FOR EXTRACTING POINTS FOR ANALYSIS
burn_sev_last_burn <- merge(fire_stack)
burn_sev_last_burn_2012 <- merge(fire_stack[[3:16]])
plot(burn_sev_last_burn_2012)
burn_sev_last_burn_2012
fire_stack[[3:16]]
#for 2012 as an example
burn_sev_last_burn_2011 <- merge(fire_stack[[3:16]])
burn_sev_2008_fires <- merge(fire_stack[[c(3,4,5)]])
burn_sev_last_burn_2011
length(getValues(burn_sev_last_burn_2011))
length(getValues(burn_sev_last_burn_2011))/4
length(getValues(burn_sev_last_burn_2011))/4
length(getValues(burn_sev_last_burn_2011))/2
rasterName <- burn_sev_last_burn_2011
size.x <- length(getValues(rasterName))/2
extent(rasterName)
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points
size.x
points <- as.data.frame(points)
?writeOGR
?gzfile
points
coordinates(points) <- ~x+y
points
proj4string(points) <- CRS("+init=epsg:4326")
points
output_name <- "burn_sev_mosaic_2011"
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE
)
plot(points)
rast2points <- function(rasterName, output_name, NA_vals = 0){
size.x <- length(getValues(rasterName))/10
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
return(points)
}
points$layer
points[points$layer == NA]
points[points$layer == NA,]
points[points$layer == 3,]
points[is.na(points$layer),]
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
points
points[is.na(points$layer),]
is.na(points$layer)
points[is.na(points$layer),]$layer
NA_vals = 0
points[is.na(points$layer),]$layer <- NA_vals
points
size.x <- length(getValues(rasterName))/10
size.x
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points
points <- as.data.frame(points)
points[is.na(points$layer),]$layer <- NA_vals
points
NA_vals = 1
size.x <- length(getValues(rasterName))/10
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
points[is.na(points$layer),]$layer <- NA_vals
points
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE
)
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
rast2points <- function(rasterName, output_name, NA_vals = 1, size.denom = 20){
size.x <- length(getValues(rasterName))/size.denom
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
points[is.na(points$layer),]$layer <- NA_vals
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
return(points)
}
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 20)
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 20)
rast2points <- function(rasterName, output_name, NA_vals = 1, size.denom = 20){
size.x <- length(getValues(rasterName))/size.denom
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
write.csv(points, file = output_name)
points[is.na(points$layer),]$layer <- NA_vals
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
return(points)
}
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 5)
output_name
rast2points <- function(rasterName, output_name, NA_vals = 1, size.denom = 20){
size.x <- length(getValues(rasterName))/size.denom
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
write.csv(x = points, file = paste0(output_name,".csv"))
points[is.na(points$layer),]$layer <- NA_vals
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
return(points)
}
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 5)
rast2points <- function(rasterName, output_name, NA_vals = 1, size.denom = 20){
size.x <- length(getValues(rasterName))/size.denom
points <- sampleRegular(x = rasterName, extent = extent(rasterName), size = size.x, xy = TRUE)
points <- as.data.frame(points)
points[is.na(points$layer),]$layer <- NA_vals
write.csv(x = points, file = paste0(output_name,".csv"))
coordinates(points) <- ~x+y
proj4string(points) <- CRS("+init=epsg:4326")
writeOGR(points,driver='ESRI Shapefile', dsn = output_name, layer = output_name, overwrite_layer = TRUE)
return(points)
}
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 10)
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic", NA_vals = 1, size.denom = 10)
plot(filledContour(burn_sev_last_burn_2011))
burn_sev_last_burn_2011
filledContour(burn_sev_last_burn_2011)
rast2points(rasterName = burn_sev_last_burn_2011, output_name = "2011_burn_sev_mosaic_small", NA_vals = 1, size.denom = 100)
burn_sev_2008_fires
rast2points(rasterName = burn_sev_2008_fires, output_name = "Burn_Severity_2008", NA_vals = 1, size.denom = 100)
filledContour(burn_sev_2008_fires)
ltraj.elk
burn_sev
#reading in the shapefile of the fire perimeters
fire_perims <- shapefile("fire_perims")
fire_perims
fire_perims@data$FIRE_NAME
unique(fire_perims@data$FIRE_NAME)
ltraj.elk
summary(ltraj.elk)
summary(ltraj.elk.df)
as.data.frame(locs_clean)
unique(elk_locs$ANIMAL_ID)
paste0("E",seq(1:length(unique(elk_locs$ANIMAL_ID))
1:length(unique(elk_locs$ANIMAL_ID)
1:length(unique(elk_locs$ANIMAL_ID))
new_nums <- 1:length(unique(elk_locs$ANIMAL_ID))
old_names <- unique(elk_locs$ANIMAL_ID)
data.frame(new = new_nums, old = old_names)
males <- c("E1", "E5", "E9")
males
plot(ltraj.elk[[9]])
plot(ltraj.elk[9])
HRmaker()
HRmaker <- function(trajdata = ltraj.elk, elknum = 1, pos_error = 25, probC){
AnimalID <- as.character(summary(ltraj.elk[elknum])[1][1,1])
sig1.x <- liker(tr = ltraj.elk[elknum],sig2 = pos_error, rangesig1 = c(1,10))[[1]][[1]]
#creating a kernal density home range
kernel <- kernelbb(ltr = ltraj.elk[elknum],sig1 = sig1.x,sig2 = pos_error)
hr <- getverticeshr(kernel, probC)
proj4string(hr) <- CRS("+proj=utm +zone=10 +datum=WGS84")
hr <- spTransform(hr, CRSobj = CRS("+proj=longlat +datum=WGS84"))
filename <- paste0(AnimalID,"_HR",probC)
writeOGR(hr, dsn = filename, driver = "ESRI Shapefile", layer = AnimalID, overwrite_layer = TRUE)
print(AnimalID)
}
HRmaker(trajdata = ltraj.elk, elknum = 9, pos_error = 25)
HRmaker(trajdata = ltraj.elk, elknum = 9, pos_error = 50)
HRmaker(trajdata = ltraj.elk, elknum = 9, pos_error = 25, probC = 50)
ltraj.elk
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 50)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 95)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 90)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 80)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 85)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 90)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 89)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 87)
HRmaker(trajdata = ltraj.elk, elknum = 14, pos_error = 25, probC = 85)
males
burn_sev_last_burn_2011
fire_stack
South_fire_stack
#transforming the burn severity spatial polygons object to WGS1984 with only the best assessment. SA1 = study area north, which burn sev was initially clipped to.
Bsev_best_assess_SA2 <- burn_sev_south[burn_sev_south@data$BEST_ASSES == "YES" ,]
Bsev_WGS1984_SA2 <- spTransform(Bsev_best_assess_SA2, WGS1984)
South_fireNames <- unique(Bsev_WGS1984_SA2@data$VB_ID)
South_fireNames <- sort(unique(South_fireNames),decreasing = TRUE)
South_fire_stack <- onefire(data = Bsev_WGS1984_SA2, fireName = South_fireNames[1], field.x = "BURNSEV")
reclass <- matrix(data = c(1,NA), ncol = 2, byrow = TRUE)
South_fire_stack <- reclassify(South_fire_stack, reclass)
for(i in 2:length(South_fireNames)){
South_frNm <- South_fireNames[i]
South_fire_rast <- onefire(data = Bsev_WGS1984_SA2, fireName = South_frNm, field.x = "BURNSEV")
print(paste0("finished ",South_frNm))
South_fire_rast <- reclassify(x = South_fire_rast, rcl = reclass)
South_fire_stack <- stack(South_fire_stack, South_fire_rast)
}
names(South_fire_stack) <- South_fireNames
South_burn_sev_last_burn <- merge(South_fire_stack)
South_fire_stack
ltraj.elk
South_fire_stack[[4:11]]
South_burn_sev_1987_thru_2006 <- merge(South_fire_stack[[4:11]])
rast2points(rasterName = South_burn_sev_1987_thru_2006, output_name = "Cecilville_burn_sev_1987_thru_2006", NA_vals = 1, size.denom = 100)
South_fire_stack
South_burn_sev_1987_thru_2011 <- merge(South_fire_stack[[1:11]])
South_burn_sev_1987_thru_2005 <- merge(South_fire_stack[[6:11]])
rast2points(rasterName = South_burn_sev_1987_thru_2011, output_name = "Cecilville_burn_sev_1987_thru_2011", NA_vals = 1, size.denom = 100)
rast2points(rasterName = South_burn_sev_1987_thru_2005, output_name = "Cecilville_burn_sev_1987_thru_2005", NA_vals = 1, size.denom = 100)
fire_stack
fire_stack[[5:16]]
fire_stack[[5:16]]
burn_sev_1987_thru_2007 <- merge(fire_stack[[5:16]])
rast2points(rasterName = burn_sev_1987_thru_2007, output_name = "burn_sev_1987_thru_2007", NA_vals = 1, size.denom = 100)
plot(time_since_last_fire_2011)
#creating a "time-since-last-burn" stack for each
year.x <- 2016
reclass1 <- matrix(data = c(2, year.x,
3, year.x,
4, year.x), ncol = 2, byrow = TRUE)
yearStack <- reclassify(fire_stack[[1]], rcl = reclass1)
for(i in 2: length(fireNames)){
year.x <- as.numeric(substr(fireNames[i], start = 1, stop = 4))
reclass <- matrix(data = c(2, year.x,
3, year.x,
4, year.x), ncol = 2, byrow = TRUE)
yearLayer <- reclassify(fire_stack[[i]], rcl = reclass)
yearStack <- stack(yearStack, yearLayer)
}
names(yearStack) <- fireNames
time_since_last_fire_2011 <- (2011 - merge(yearStack[[3:16]]))
plot(burn_sev_last_burn_2012/time_since_last_fire_2011)
plot(time_since_last_fire_2011)
time_since_last_fire_2011
2011-1987+10
rast2points(rasterName = time_since_last_fire_2011, output_name = "Time_since_last_fire_2011", NA_vals = 2011-1987+11, size.denom = 100)
yearStack
time_since_last_fire_2007 <- (2007 - merge(yearStack[[5:16]]))
2007-1987+11
rast2points(rasterName = time_since_last_fire_2007, output_name = "Time_since_last_fire_2007", NA_vals = 34, size.denom = 100)
